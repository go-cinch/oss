// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"oss/internal/biz"
	"oss/internal/conf"
	"oss/internal/data"
	"oss/internal/pkg/minio"
	"oss/internal/pkg/ocr"
	"oss/internal/pkg/task"
	"oss/internal/server"
	"oss/internal/service"
)

import (
	_ "github.com/go-cinch/common/plugins/gorm/filter"
	_ "github.com/go-cinch/common/plugins/kratos/encoding/yml"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(c *conf.Bootstrap) (*kratos.App, func(), error) {
	worker, err := task.New(c)
	if err != nil {
		return nil, nil, err
	}
	minioMinio, err := minio.New(c)
	if err != nil {
		return nil, nil, err
	}
	universalClient, err := data.NewRedis(c)
	if err != nil {
		return nil, nil, err
	}
	tenant, err := data.NewDB(c)
	if err != nil {
		return nil, nil, err
	}
	sonyflake, err := data.NewSonyflake(c)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := data.NewTracer(c)
	if err != nil {
		return nil, nil, err
	}
	authClient, err := data.NewAuthClient(c)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup := data.NewData(universalClient, tenant, sonyflake, tracerProvider, authClient)
	ossRepo := data.NewOssRepo(dataData)
	transaction := data.NewTransaction(dataData)
	cache := data.NewCache(c, universalClient)
	ossUseCase := biz.NewOssUseCase(c, ossRepo, transaction, cache)
	api, err := ocr.New(c)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ocrUseCase := biz.NewOcrUseCase(c, api)
	ossService := service.NewOssService(worker, minioMinio, ossUseCase, ocrUseCase)
	grpcServer := server.NewGRPCServer(c, ossService, authClient)
	httpServer := server.NewHTTPServer(c, ossService, authClient)
	app := newApp(grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
